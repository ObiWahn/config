#!/bin/bash
# Copyright - 2010 - Jan Christoph Uhde <Jan@UhdeJC.com>

obi-update-home(){
    rsync -rlv /etc/skel/ ~
}

alias vim='vim -p'
vimcpp(){
   local cmd=( 'vim' '-p')
    while IFS=' ' read first reast; do
        IFS=':' read -u 3 name line pos _  3<<<"$first"
        cmd+=("$name" "+$line")
    done <<< "$@"
    echo "${cmd[@]}"
    "${cmd[@]}"
}


alias cd..='cd ..'
alias rsync-pro='rsync -avh --partial --progress'

## turn monitor off
alias soff='xset dpms force off'

### ssh
alias ssh-show-fpr='ssh-keygen -lv -f'
ssh-show-for-host(){
    for key in /etc/ssh/ssh_host_*_key.pub; do
        ssh-keygen -lv -f "$key"
    done
}

###############################################################################
### FileSystem and Dir Size Commands

## Enable color support of ls and also add handy aliases
case $(uname) in
    Linux)
        eval `dircolors -b`
        alias ls='ls --color=always -h'
    ;;
    Darwin)
        alias ls='ls -G -h'
    ;;
esac

alias la='ls -a'
alias ll='ls -l'
alias l='ls -s'
alias lla='ls -s -all'
alias less='less -R'
alias dir='ls --color=auto --format=vertical'
alias vdir='ls --color=auto --format=long'

du(){ /usr/bin/du -h "$@" ; }
df(){ /bin/df -h "$@" ; }

alias di='/usr/bin/di -h -s -n -t -f Mfpbst -I ext3,ext4,fuseblk,ntfs'
alias dia='/usr/bin/di -h -s -n -t -f Mfpbst -I ext3,ext4,fuseblk,fuse,tmpfs'
alias dio='/usr/bin/di -h -s -n -t -f MfpbstO -I ext3,ext4,fuseblk,ntfs'

###############################################################################
#admin stuff
alias path='echo -e ${PATH//:/\\n}'
alias systemd-show-runlevel='systemctl list-units --type=target'
# log colorizer
alias ccze='ccze -A'

o_adm_ssl_cert_hash(){
    local cfile="$1"
    ln -s "$cfile" "$(openssl x509 -hash -noout -in "$cfile").0"
}

o_adm_ssl_cert_hash_adv(){
	#program [-f] /path/to/certfile
	local openssl=/usr/bin/openssl
	local certdir=${SSL_CERT_DIR:-/etc/ssl/certs}

	# -f as firt args sets overwrite mode
	if [[ "$1" = "-f" ]]; then
	   local overwrite=1
	   shift # remove $1
	fi

	if [ ! -f $openssl ]; then
	  	echo "ERROR: Can't find $openssl. openssl-util installed?" >&2
	fi


	if [ -f "$1" ]; then
	  	local certfile=$1
	  	local certname="$(basename "$certfile")"

	  	echo "Certificate $certname"
	  	echo "  copy to $certdir"

		if (( $overwrite == 1 )) && [[ -f "$certdir/$certname" ]]; then
		    echo >&2
		    echo "ERROR: certificate $certname exists" >&2
		    exit 2;
		fi

		cp "$1" "$certdir/$certname"

		# create symbolic link from hash
		echo -n "  generating hash: "
		local HASH="$($openssl x509 -hash -noout -in "$certfile")"
		echo "$HASH"

		# handle hash collisions
		suffix=0
		while (( $overwrite == 1 )) && [ -h "$certdir/$HASH.$suffix" ]; do
			(( foo++ ))
		done

		echo "  linking $HASH.$suffix -> $certname"

		if [[ $overwrite ]]; then
			ln -sf "$certname" "$certdir/$HASH.$suffix"
		else
			ln -s "$certname" "$certdir/$HASH.$suffix"
		fi
	else
		echo >&2
		echo "ERROR: file does not exist $1" >&2
		echo >&2
		echo "This script adds (root) certificates for wget(ssl) to $certdir." >&2
		echo "SYNTAX: $(basename $0) [Options] [x509-certificate]" >&2
		echo >&2
		echo "Option: -f      force overwriting if certificate exists" >&2
	fi
}

o_adm_ssl_cert_decode(){
    local cfile="$1"
    openssl x509 -in "$cfile" -text -noout
}

o_adm_sort_passwd(){
    if sort -n -t: -k3 < /etc/passwd >/etc/passwd.new; then
        cp /etc/passwd /etc/passwd.old
        mv /etc/passwd.new /etc/passwd
    else
        echo "sorting of passwd failed"
    fi
}

o_ping_fragmentation_mtu_ip(){
    # TODO write loop to test for good result
    ping -s "$1" -M do "$2"
}

o_process_count(){
    ps -ef | \
    perl -a -F'\d+:\d+:\d+ ' -n -e 'print @F[1]' -- | \
    sort | uniq -c | sort -n
}

###############################################################################
# grep

alias grep='grep --colour'
alias bgrep='grep --binary-files=text'
alias egrep='egrep --colour --binary-files=text'

gps(){
    # grep for process
    ps aux | \
    grep -v "egrep --colour --binary-files=text" | \
    egrep --colour --binary-files=text "$@"
}

o_pscg(){ ps xawf -eo pid,user,cgroup,args; }
o_gpscg(){
    pscg | \
    grep -v "egrep --colour --binary-files=text" | \
    egrep --colour --binary-files=text "$@"
}

###############################################################################
# type

type-vim(){
    file="$(type "$1" | awk '{print $3}')"
    test -e "$file" && vim "$file"
}

type-less(){
    file="$(type "$1" | awk '{print $3}')"
    test -e "$file" && vim "$file"
}

type-obi(){
    res="$(type "$1")"
    if (($? == 0)); then
        if [[ "$res" == *aliased* ]]; then
            grep -R "$1" ~/.bashrc.d/*
        fi
    fi
}

###############################################################################
# screen / tmux

screen(){
    #list screen sessions of all users
    if [[ "$1" != "-ls-all" ]]; then
        /usr/bin/screen "$@"
    else
        shopt -s nullglob
        local screens=(/var/run/screen/S-*/*)
        shopt -u nullglob
        if (( ! ${#screens[@]} )); then
            echo "no screen session found in /var/run/screen"
        else
            for s in ${screens[@]#*S-}; do
                echo "$s"
            done
        fi
    fi
}

tmuxa(){
    /usr/bin/tmux attach-session -t "$@"
}

tmux(){
    if [[ $1 == "-r" ]]; then
        shift
        /usr/bin/tmux attach-session "$@"
    elif [[ $1 == "main" ]]; then
        tmuxa "$@"
    elif [[ $1 == "-ls" ]]; then
        shift
        /usr/bin/tmux list-sessions "$@"
    else
        /usr/bin/tmux "$@"
    fi
}

tmain(){
    /usr/bin/tmux attach-session -t main "$@"
}

###############################################################################
#root related

if (( UID == 0 )); then
    update(){
        case $1 in
            d*)
                apt-get update && apt-get dist-upgrade
            ;;
            *)
                apt-get update && apt-get upgrade
            ;;
        esac
    }
else
    alias ifconfig='/sbin/ifconfig'
    alias poweroff='sudo /sbin/poweroff'
    alias halt='sudo /sbin/poweroff'
fi
