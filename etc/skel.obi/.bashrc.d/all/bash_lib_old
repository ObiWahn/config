#!/bin/bash
# Copyright - 2010-2018 - Jan Christoph Uhde <Jan@UhdeJC.com>
# vim:filetype=sh foldmethod=marker foldmarker="{{{,}}}"
# set -o vi

### system info ##################################################{{{
_o__page_size_bytes="$(getconf PAGESIZE)"
_o__page_size_KiB="$((_o__page_size_bytes / 1024))"

# shellcheck disable=SC2155
_o_get_meminfo_statm(){
    #most reliable
    local size="$(     awk '{print $1}' < "/proc/$1/statm" )"
    local resident="$( awk '{print $2}' < "/proc/$1/statm" )"
    local shared="$(   awk '{print $3}' < "/proc/$1/statm" )"
    echo "VmSize_KiB $((size * _o__page_size_KiB)) VmRss_KiB $((resident * _o__page_size_KiB)) RssFile+RssShmem_KiB $((shared * _o__page_size_KiB))"
}

# shellcheck disable=SC2155
_o_get_meminfo_top(){
    #slow
    local line="$( top -p "$1" -n1 -b | tail -n1 )"
    local VIRT="$( awk '{print $5}' <<< "$line" )"
    local RES="$(  awk '{print $6}' <<< "$line" )"
    local SHR="$(  awk '{print $7}' <<< "$line" )"
    echo "VmSize $VIRT VmRss $RES SHR $SHR (no fixed units)"
}

# shellcheck disable=SC2155
_o_get_meminfo_ps(){
    local line="$(ps -p "$1" -o rss,vsz | tail -n1)"
    local RSS="$( awk '{print $1}' <<< "$line" )"
    local VSZ="$( awk '{print $2}' <<< "$line" )"
    echo "VmSize_KiB $VSZ VmRss_kB $RSS"
    # KiB though manpage claims other wise"
}


# shellcheck disable=SC2155
_o_get_meminfo_stat(){
    local vsize="$( awk '{print $23}' < "/proc/$1/stat" )"
    local rss="$( awk '{print $24}' < "/proc/$1/stat" )"
    echo "VmSize_KiB $(( vsize / 1024 )) VmRss_KiB $(( rss * _o__page_size_KiB ))"
}

# shellcheck disable=SC2155
_o_get_meminfo_status(){
	local VmSize="$(grep VmSize "/proc/$1/status" | awk '{print $2}'  )"
	local VmRSS="$(grep VmRSS "/proc/$1/status" | awk '{print $2}'  )"
	echo "VmSize_KiB $VmSize VmRss_KiB $VmRSS"
    # claims kB
}
### system info - end ############################################}}}
### remote commands ##############################################{{{
_o_execute_remote(){
    local interpreter="$1"
    local user_at_host="$2"
    local realscript="$3"
    shift 3

    local -a args

    local count=0
    for arg in "$@"; do
      args[count]=$(printf '%q' "$arg")
      ((count++))
    done

    # shellcheck disable=SC2029 # i must be expanded on the remote side
    ssh "$user_at_host" "cat | ${interpreter} /dev/stdin" "${args[@]}" < "$realscript"
}
export -f _o_execute_remote
### remote commands - end ########################################}}}


### array ########################################################{{{
#http://stackoverflow.com/questions/7442417/how-to-sort-an-array-in-bash
declare BSORT=()
_o_bubble_sort(){
    # @param [ARGUMENTS]...
    #
    # Sort all positional arguments and store them in global array BSORT.
    # Without arguments sort this array. Return the number of iterations made.
    #
    # Bubble sorting lets the heaviest element sink to the bottom.
    #
    # @usage
    #
    # BSORT=(a c b 'z y' 3 5)
    # bubble_sort
    # echo ${BSORT[@]}
    (($# > 0)) && BSORT=("$@")
    local j=0 ubound=$((${#BSORT[*]} - 1))
    while ((ubound > 0))
    do
        local i=0
        while ((i < ubound))
        do
            if [ "${BSORT[$i]}" \> "${BSORT[$((i + 1))]}" ]
            then
                local t="${BSORT[$i]}"
                BSORT[$i]="${BSORT[$((i + 1))]}"
                BSORT[$((i + 1))]="$t"
            fi
            ((++i))
        done
        ((++j))
        ((--ubound))
    done
    #echo $j
}

_o_sort(){
    local arr=( "$@" )
    _o_bubble_sort "${arr[@]}"
}

_o_sort_echo(){
    local arr=( "$@" )
    _o_sort "${arr[@]}"
    echo "${BSORT[@]}"
}

_o_get_last(){
    local arr=( "$@" )
    echo "${arr[${#arr[@]}-1]}"
}

_o_sort_get_last(){
    local arr=( "$@" )
    _o_bubble_sort "${arr[@]}"
    echo "${BSORT[${#BSORT[@]}-1]}"
}

export BSORT
export -f _o_bubble_sort _o_sort _o_sort_echo _o_get_last _o_sort_get_last
### array - end ##################################################}}}
