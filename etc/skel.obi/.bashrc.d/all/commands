#!/bin/bash
# Copyright - 2018 - Jan Christoph Uhde <Jan@UhdeJC.com>

### scripts ######################################################{{{
unrz(){
    ~/.bashrc.d/all/scripts/unrz "$@"
}
export -f unrz

watchdir(){
    _o_wait_for_file_event_bash "$@"
}
export -f watchdir
### scripts - end#################################################}}}

### vim ##########################################################{{{
vim(){
    $_o_system_vim -p "$@"
}

vimcpp(){
   local cmd=( 'vim' '-p')
    while IFS=' ' read -r first _; do
        IFS=':' read -r -u 3 name line _  3<<<"$first"
        cmd+=("$name" "+$line")
    done <<< "$@"
    echo "${cmd[@]}"
    "${cmd[@]}"
}
### vim - end ####################################################}}}

### screen / power ###############################################{{{
screen_off(){
    sleep 1; xset dpms force off;
}

screen_presentation_on(){
    xset s off -dpms
}

screen_presentation_off(){
    xset s on +dpms
}

disable_lid(){
    systemd-inhibit --what=handle-lid-switch sleep 1d
}

son() {
    swaymsg "output * dpms on"
}

soff() {
    swaymsg "output * dpms off"
}

export -f screen_off screen_presentation_on screen_presentation_off
export -f disable_lid son soff
### screen / power - end #########################################}}}

### sudo #########################################################{{{
xsudo(){
    user="$1"
    shift
    xauth extract - $DISPLAY | \
        sudo -u "$user" xauth -f /home/"$user"/.Xauthority merge -
    xhost +si:localuser:"$user"
    sudo -u "$user" -i "$@"
}

export -f xsudo
### sudo - end ###################################################}}}

### ssh ##########################################################{{{
show_host_keys(){
    for f in /etc/ssh/*pub; do
        echo "hostkey fingerprint for $f"
        ssh-keygen -lvf "$f"
        ssh-keygen -Emd5 -lvf "$f"
        echo
        echo
    done
}

show_user_keys(){
    for f in "$HOME/.ssh/"*pub; do
        echo "userkey fingerprint for $f"
        ssh-keygen -lvf "$f"
        ssh-keygen -Emd5 -lvf "$f"
        echo
        echo
    done
}

export -f show_host_keys show_user_keys
alias ssh_md5='ssh -o FingerprintHash=md5'
alias ssh-show-fpr='ssh-keygen -lv -f'
### ssh - end ####################################################}}}

### fzf ##########################################################{{{
export FZF_FLAGS="-i"
fzff(){ fzf "${FZF_FLAGS}" "$@"; }
fps() { ps aux | tail -n +2 | fzff | awk '{ print $2 }'; }
fpkill() { kill "$@" $(fps); }
fpk() { fpkill "$@"; }
fports() { find_port_clean | fzff; }
frg() { rg "$@" | fzff; }

#path should not have spaces
fpath() { find $(path) -perm -o=x | fzff; }
rgbashrc() { rg $@ ~/.bash*; }

### fzf - end ####################################################}}}

### ssl ##########################################################{{{
o_adm_ssl_cert_decode(){
    local cfile="$1"
    openssl x509 -in "$cfile" -text -noout
}

o_adm_ssl_cert_hash(){
    local cfile="$1"
    ln -s "$cfile" "$(openssl x509 -hash -noout -in "$cfile").0"
}

# shellcheck disable=SC2155 # declare and assign in one
o_adm_ssl_cert_hash_adv(){
    #program [-f] /path/to/certfile
    local openssl=/usr/bin/openssl
    local certdir=${SSL_CERT_DIR:-/etc/ssl/certs}

    # -f as firt args sets overwrite mode
    if [[ "$1" = "-f" ]]; then
        local overwrite=1
        shift # remove $1
    fi

    if [ ! -f $openssl ]; then
        echo "ERROR: Can't find $openssl. openssl-util installed?" >&2
    fi


    if [ -f "$1" ]; then
        local certfile=$1
        local certname="$(basename "$certfile")"

        echo "Certificate $certname"
        echo "  copy to $certdir"

        if (( overwrite == 1 )) && [[ -f "$certdir/$certname" ]]; then
            echo >&2
            echo "ERROR: certificate $certname exists" >&2
            exit 2;
        fi

        cp "$1" "$certdir/$certname"

        # create symbolic link from hash
        echo -n "  generating hash: "
        local HASH="$($openssl x509 -hash -noout -in "$certfile")"
        echo "$HASH"

        # handle hash collisions
        suffix=0
        while (( overwrite == 1 )) && [ -h "$certdir/$HASH.$suffix" ]; do
            (( foo++ ))
        done

        echo "  linking $HASH.$suffix -> $certname"

        if [[ $overwrite ]]; then
            ln -sf "$certname" "$certdir/$HASH.$suffix"
        else
            ln -s "$certname" "$certdir/$HASH.$suffix"
        fi
    else
        echo >&2
        echo "ERROR: file does not exist $1" >&2
        echo >&2
        echo "This script adds (root) certificates for wget(ssl) to $certdir." >&2
        echo "SYNTAX: $(basename "$0") [Options] [x509-certificate]" >&2
        echo >&2
        echo "Option: -f      force overwriting if certificate exists" >&2
    fi
}
### ssl ##########################################################{{{

### build ########################################################{{{
omake(){
    # shellcheck disable=SC2155 # declare and assign in one
    local dir_="$(pwd)"
    local builddir_="${dir_##*/}-build"
    local builddirfull_="${dir_}-build"

    local candidates=(
        "$builddirfull_/current"
        "$builddirfull_"
        "$builddir_"
        'build'
    )

    local found_build_dir=false

    local d real_build_dir
    for d in "${candidates[@]}"; do
        if [[ -d "$d" ]]; then
            cd "$d" && found_build_dir=true && cd - || return
            real_build_dir="$d"
            echo "Using directory $real_build_dir for building"
            sleep 1
            break
        fi
    done

    if ! $found_build_dir ; then
        echo "can not change into suitable build dir!";
        return 42;
    fi

    (
        cd "$real_build_dir" && \
        make -j "$(nproc)" "$@"
    )
}
make_obi() { omake "$@"; }
export -f omake make_obi

ocmake(){
    [[ -f CMakeLists.txt ]] || { echo "no CMakeLists.txt"; return; }

    # shellcheck disable=SC2155 # declare and assign in one
    local dir_="$(pwd)"
    local builddir_="${dir_##*/}-build"
    local builddirfull_="${dir_}-build"

    local candidates=(
        "$builddirfull_/current"
        "$builddirfull_"
        "$builddir_"
        'build'
    )

    local build_type="${1:-RelWithDebInfo}"
    shift 1

    mkdir -p "$builddirfull_/$build_type" || { echo "can not create build dir"; return; }
    rm -f "$builddirfull_/current"
    ln -s "$builddirfull_/$build_type" "$builddirfull_/current" || { echo "can not create symlink"; return; }
    [[ -h "$dir_/build_dir" ]] && rm "$dir_/build_dir"
    ln -s "$builddirfull_/current" "$dir_/build_dir"

    (
        cd "$builddirfull_/$build_type" || _o_ferrx "can not cd into build dir"
        cmake "-DCMAKE_BUILD_TYPE=${build_type}" "$@" "$dir_"
    )
}
cmake_obi() { ocmake "$@"; }
export -f ocmake cmake_obi
### build - end ##################################################}}}

### audit ########################################################{{{
audit() {
    aureport -au -i --summary --success
    aureport -au -i --success
    aureport -au -i --summary --failed
    aureport -au -i --failed
}
### audit - end###################################################}}}

### docker #######################################################{{{

docker_get_all_container(){
    docker ps --all -q
}

docker_get_all_images(){
    docker images --all -q
}

docker_get_all_volumes(){
    docker volume ls -q
}

docker_stop_all(){
    # shellcheck disable=SC2046
    docker stop $(docker_get_all_container)
}

docker_rm_all(){
    # shellcheck disable=SC2046
    docker rm $(docker_get_all_container)
}

docker_image_rm_all(){
    # shellcheck disable=SC2046
    docker rmi $(docker_get_all_container)
}

docker_volume_rm_all(){
    docker volume rm $(docker_get_all_volumes)
}

docker_total_reset(){
    docker_stop_all
    docker_rm_all
    docker_volume_rm_all
    docker_image_rm_all
}

docker_image_rm_dangling(){
    # shellcheck disable=SC2046
    docker rmi $(docker images -f "dangling" -q)
}

docker-desktop-host() {
    docker run -it --rm --privileged --pid=host alpine:edge nsenter -t 1 -m -u -n -i sh
}

### docker - end #################################################}}}

### system info ##################################################{{{
## find free xdisplay
xdisplay(){
    local disp=0
    while [ -e "/tmp/.X${disp}-lock" ]; do
        disp=$(( disp + 1 ))
    done
    echo $disp
}
export -f xdisplay

o_mime_types(){
    while read -r mime_type rest;do
        echo -n "$mime_type:"
        xdg-mime query default "$mime_type" 2>/dev/null
        echo
    done < <( grep -v '^#' /etc/mime.types)
}

o_mime_types_set() {
    o_mime_types | /usr/bin/env grep desktop
}

### system info - end ############################################}}}

### admin ########################################################{{{
o_adm_sort_passwd(){
    if sort -n -t: -k3 < /etc/passwd >/etc/passwd.new; then
        cp /etc/passwd /etc/passwd.old
        mv /etc/passwd.new /etc/passwd
    else
        echo "sorting of passwd failed"
    fi
}

o_ping_fragmentation_mtu_ip(){
    # TODO write loop to test for good result
    ping -s "$1" -M 'do' "$2"
}

o_process_count(){
    ps -ef | \
    perl -a -F'\d+:\d+:\d+ ' -n -e 'print @F[1]' -- | \
    sort | uniq -c | sort -n
}

_o_udev_by_path(){
    udevadm info -a -p  "$(udevadm info -q path -n "$@")"
}

_o_bugs(){
    # TODO - ask for bugs in smaller chunks

    # list bugs of given gravity
    local state=""
    if [[ -z $1 ]]; then
        state="$1"
    else
        state="serious"
    fi
    # shellcheck disable=SC2155 # declare and assign in one
    local pkg_list="$(dpkg -l | tail -n+5 | awk '{print $2}')"
    echo "pkg-list ### $pkg_list ###"
    # shellcheck disable=SC2086
    apt-listbugs list -s "$state" $pkg_list | less
}

_o_vulnerable_packages(){
    debsecan | grep -E "${1:-remote.*high}" | awk '{ print $2 }' | sort -u
}
export -f _o_udev_by_path _o_bugs _o_vulnerable_packages
### admin - end ##################################################}}}

### user #########################################################{{{
youtube-stream(){
    local my_mplayer=(
        '/usr/bin/mplayer'
        '-cookies'
        '-cookies-file' '/tmp/youtube-cookies.txt'
    )

    while :; do
        case $1 in
            -*)
                my_mplayer+=("$1")
                shift
            ;;
            *)
                break
            ;;
        esac
    done

    #check this
    local yhash="${1%%&=list*}"
    yhash="${yhash##*=}"
    echo "yhash: $yhash"
    local url="http://www.youtube.com/watch?v=$yhash"
    echo "trying URL: $url"

    local my_youtube_dl=(
        '/usr/bin/youtube-dl'
        '-g'
        '--cookies' '/tmp/youtube-cookies.txt'
    )
    #my_youtube_dl+=( '-f' '34' ) #limit max quality
    my_youtube_dl+=("$url")

    local playurl
    if playurl="$( "${my_youtube_dl[@]}" )"; then
        echo "trying to play $playurl"
    else
        echo "unable to get youtube url ... exiting"
        return 1
    fi
    my_mplayer+=("$playurl")

    "${my_mplayer[@]}"
}
export -f youtube-stream

obi-update-home(){
    rsync -rlv /etc/skel/ ~
}
### user - end ###################################################}}}
